def cos_law(li, lj, lk):
    thetak = np.arccos((li * li + lj * lj - lk * lk) / (2 * li * lj))
    return thetak

nv = 4
F = [[0, 1, 3], [1, 2, 3]]
edges = [[0, 1, 1.0], [1, 2, 1.0], [2, 3, 1.0], [0, 3, 1.0], [1, 3, 1.0]]
edges_matrix = np.zeros((nv, nv),np.float32)
gamma = [0.5, 0.5, 0.5, 0.5]
I = []
for edge in edges:
    edges_matrix[edge[0], edge[1]] = edge[2]
    tp = (edge[2] ** 2 - gamma[edge[0]] ** 2 - gamma[edge[1]] ** 2) / (2 * gamma[edge[0]] * gamma[edge[1]])
    I.append(tp)
Kbar = np.float32([-0.5, -0.5, -0.5, -0.5])
u = np.zeros(nv, np.float32)
count = 0;
while count < 500:
    count += 1;
    angles = np.zeros(nv, np.float32)
    for f in F:
        l01 = edges_matrix[f[0], f[1]]
        l02 = edges_matrix[f[0], f[2]]
        l12 = edges_matrix[f[1], f[2]]
        angles[f[2]] += cos_law(l02, l12, l01)
        angles[f[1]] += cos_law(l01, l12, l02)
        angles[f[0]] += cos_law(l01, l02, l12)
    angles -= np.pi
    u -= 0.00001 * (Kbar - angles / np.pi)
    if count % 10 == 0:
        print('K', angles / np.pi * 180.0)
        print('u', u, np.sum(u));
        print(edges_matrix)
    for ii in range(nv):
        for jj in range(nv):
            if (edges_matrix[ii][jj]):
                edges_matrix[ii, jj] *= np.exp(u[ii]) * np.exp(u[jj])
